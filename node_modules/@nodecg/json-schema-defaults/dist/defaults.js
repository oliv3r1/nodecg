"use strict";
exports.__esModule = true;
/**
 * check whether item is plain object
 */
var isObject = function (item) {
    return typeof item === 'object' && item !== null && item.toString() === {}.toString();
};
/**
 * deep JSON object clone
 */
var cloneJSON = function (source) {
    return JSON.parse(JSON.stringify(source));
};
/**
 * returns a result of deep merge of two objects
 */
var merge = function (target, source) {
    target = cloneJSON(target);
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            if (isObject(target[key]) && isObject(source[key])) {
                target[key] = merge(target[key], source[key]);
            }
            else {
                target[key] = source[key];
            }
        }
    }
    return target;
};
/**
 * get object by reference. works only with local references that points on
 * definitions object
 */
var getLocalRef = function (path, definitions) {
    var pathArr = path.replace(/^#\/definitions\//, '').split('/');
    var find = function (path, root) {
        var key = path.shift();
        if (key === undefined || !root[key]) {
            return {};
        }
        else if (!path.length) {
            return root[key];
        }
        else {
            return find(path, root[key]);
        }
    };
    var result = find(pathArr, definitions);
    if (!isObject(result)) {
        return result;
    }
    return cloneJSON(result);
};
/**
 * merge list of objects from allOf properties
 * if some of objects contains $ref field extracts this reference and merge it
 */
var mergeAllOf = function (allOfList, definitions) {
    var length = allOfList.length;
    var index = -1;
    var result = {};
    while (++index < length) {
        var item = allOfList[index];
        item = typeof item.$ref !== 'undefined' ? getLocalRef(item.$ref, definitions) : item;
        result = merge(result, item);
    }
    return result;
};
/**
 * returns a object that built with default values from json schema
 */
var defaults = function (schema, definitions) {
    if (typeof schema['default'] !== 'undefined') {
        return schema['default'];
    }
    else if (typeof schema.allOf !== 'undefined') {
        var mergedItem = mergeAllOf(schema.allOf, definitions);
        return defaults(mergedItem, definitions);
    }
    else if (typeof schema.$ref !== 'undefined') {
        var reference = getLocalRef(schema.$ref, definitions);
        return defaults(reference, definitions);
    }
    else if (schema.type === 'object') {
        if (!schema.properties) {
            return {};
        }
        for (var key in schema.properties) {
            if (schema.properties.hasOwnProperty(key)) {
                schema.properties[key] = defaults(schema.properties[key], definitions);
                if (typeof schema.properties[key] === 'undefined') {
                    delete schema.properties[key];
                }
            }
        }
        return schema.properties;
    }
    else if (schema.type === 'array') {
        if (!schema.items) {
            return [];
        }
        // minimum item count
        var ct = schema.minItems || 0;
        // tuple-typed arrays
        if (schema.items.constructor === Array) {
            var values = schema.items.map(function (item) {
                return defaults(item, definitions);
            });
            // remove undefined items at the end (unless required by minItems)
            for (var i = values.length - 1; i >= 0; i--) {
                if (typeof values[i] !== 'undefined') {
                    break;
                }
                if (i + 1 > ct) {
                    values.pop();
                }
            }
            return values;
        }
        // object-typed arrays
        var value = defaults(schema.items, definitions);
        if (typeof value === 'undefined') {
            return [];
        }
        else {
            var values = [];
            for (var i = 0; i < Math.max(1, ct); i++) {
                values.push(cloneJSON(value));
            }
            return values;
        }
    }
};
/**
 * main function
 */
function default_1(schema, definitions) {
    var _a;
    if (typeof definitions === 'undefined') {
        definitions = (_a = schema.definitions) !== null && _a !== void 0 ? _a : {};
    }
    else if (isObject(schema.definitions)) {
        definitions = merge(definitions, schema.definitions);
    }
    return defaults(cloneJSON(schema), definitions);
}
exports["default"] = default_1;
